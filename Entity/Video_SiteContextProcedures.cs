// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Video_Site.Entity;

namespace Video_Site.Entity
{
    public partial class Video_SiteContext
    {
        private IVideo_SiteContextProcedures _procedures;

        public virtual IVideo_SiteContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Video_SiteContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IVideo_SiteContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class Video_SiteContextProcedures : IVideo_SiteContextProcedures
    {
        private readonly Video_SiteContext _context;

        public Video_SiteContextProcedures(Video_SiteContext context)
        {
            _context = context;
        }

        public virtual async Task<int> sp_DangKyTaiKhoanAsync(string userid, string username, string hoten, string email, string password, string role, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userid",
                    Size = 20,
                    Value = userid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "username",
                    Size = 25,
                    Value = username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "hoten",
                    Size = 510,
                    Value = hoten ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 100,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 510,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "role",
                    Size = 10,
                    Value = role ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_DangKyTaiKhoan] @userid = @userid, @username = @username, @hoten = @hoten, @email = @email, @password = @password, @role = @role", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_DangNhapResult>> sp_DangNhapAsync(string username, string password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "username",
                    Size = 25,
                    Value = username ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 255,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_DangNhapResult>("EXEC @returnValue = [dbo].[sp_DangNhap] @username = @username, @password = @password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
